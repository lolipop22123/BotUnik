from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import os
from pathlib import Path

from database.user import db
from handlers.Admin.states import MediaManagementStates
from config import ADMIN_ID

router = Router()


def admin_main_kb():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∫–∏"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞–º–∏", callback_data="admin_fonts")
        ],
        [
            InlineKeyboardButton(text="üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π", callback_data="admin_music")
        ],
        [
            InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="backstart")
        ]
    ])
    return kb


def fonts_management_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞–º–∏"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—Ä–∏—Ñ—Ç", callback_data="add_font")
        ],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤", callback_data="list_fonts")
        ],
        [
            InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])
    return kb


def music_management_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É", callback_data="add_music")
        ],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏", callback_data="list_music")
        ],
        [
            InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])
    return kb


@router.callback_query(F.data == "admin_panel")
async def admin_panel_cb(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_main_kb()
    )
    await callback.answer()


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–†–ò–§–¢–ê–ú–ò ====================

@router.callback_query(F.data == "admin_fonts")
async def admin_fonts_cb(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞–º–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    fonts_count = len(await db.get_all_fonts())
    
    await callback.message.edit_text(
        f"üî§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ —à—Ä–∏—Ñ—Ç–æ–≤: {fonts_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=fonts_management_kb()
    )
    await callback.answer()


@router.callback_query(F.data == "add_font")
async def add_font_cb(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üî§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ (.ttf, .otf)\n\n"
        "‚ö†Ô∏è –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ `fonts/`",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_fonts")]
        ])
    )
    await state.set_state(MediaManagementStates.waiting_for_font)
    await callback.answer()


@router.message(MediaManagementStates.waiting_for_font, F.document)
async def process_font_upload(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if not document.file_name.lower().endswith(('.ttf', '.otf')):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .ttf –∏ .otf",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_fonts")]
            ])
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤
        fonts_dir = Path("fonts")
        fonts_dir.mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(document.file_id)
        file_path = fonts_dir / document.file_name
        await bot.download_file(file.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        font_id = await db.add_font(
            file_id=document.file_id,
            file_name=document.file_name,
            file_path=str(file_path),
            added_by=message.from_user.id
        )
        
        await message.answer(
            f"‚úÖ <b>–®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}\n"
            f"üìÇ –ü—É—Ç—å: {file_path}\n"
            f"üÜî ID –≤ –ë–î: {font_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_font")],
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_fonts")]
            ])
        )
        await state.clear()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ä–∏—Ñ—Ç–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_fonts")]
            ])
        )
        await state.clear()


@router.callback_query(F.data == "list_fonts")
async def list_fonts_cb(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    fonts = await db.get_all_fonts()
    
    if not fonts:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.",
            reply_markup=fonts_management_kb()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
    text = "üìã <b>–°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤:</b>\n\n"
    buttons = []
    
    for i, font in enumerate(fonts, 1):
        text += f"{i}. {font['file_name']}\n"
        text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {font['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {font['file_name'][:20]}...",
                callback_data=f"delete_font_{font['id']}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_fonts")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_font_"))
async def delete_font_cb(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    font_id = int(callback.data.split("_")[-1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
        font = await db.get_font_by_id(font_id)
        
        if font:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            if font.get('file_path') and os.path.exists(font['file_path']):
                os.remove(font['file_path'])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            await db.delete_font(font_id)
            
            await callback.answer(f"‚úÖ –®—Ä–∏—Ñ—Ç {font['file_name']} —É–¥–∞–ª–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await list_fonts_cb(callback)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–£–ó–´–ö–û–ô ====================

@router.callback_query(F.data == "admin_music")
async def admin_music_cb(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    music_count = len(await db.get_all_music())
    
    await callback.message.edit_text(
        f"üéµ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π</b>\n\n"
        f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {music_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=music_management_kb()
    )
    await callback.answer()


@router.callback_query(F.data == "add_music")
async def add_music_cb(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üéµ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª (.mp3, .wav, .m4a)\n\n"
        "‚ö†Ô∏è –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ `music/`",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_music")]
        ])
    )
    await state.set_state(MediaManagementStates.waiting_for_music)
    await callback.answer()


@router.message(MediaManagementStates.waiting_for_music, F.audio)
async def process_music_upload(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏"""
    audio = message.audio
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º—É–∑—ã–∫–∏
        music_dir = Path("music")
        music_dir.mkdir(exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_name = audio.file_name or f"music_{audio.file_id[:8]}.mp3"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(audio.file_id)
        file_path = music_dir / file_name
        await bot.download_file(file.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        music_id = await db.add_music(
            file_id=audio.file_id,
            file_name=file_name,
            file_path=str(file_path),
            duration=audio.duration or 0,
            added_by=message.from_user.id
        )
        
        await message.answer(
            f"‚úÖ <b>–ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {file_name}\n"
            f"üìÇ –ü—É—Ç—å: {file_path}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.duration}—Å\n"
            f"üÜî ID –≤ –ë–î: {music_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_music")],
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_music")]
            ])
        )
        await state.clear()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_music")]
            ])
        )
        await state.clear()


@router.callback_query(F.data == "list_music")
async def list_music_cb(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    music_list = await db.get_all_music()
    
    if not music_list:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏ –ø—É—Å—Ç</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º—É–∑—ã–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.",
            reply_markup=music_management_kb()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏:</b>\n\n"
    buttons = []
    
    for i, music in enumerate(music_list, 1):
        duration_min = music['duration'] // 60
        duration_sec = music['duration'] % 60
        text += f"{i}. {music['file_name']}\n"
        text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min}:{duration_sec:02d}\n"
        text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {music['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {music['file_name'][:20]}...",
                callback_data=f"delete_music_{music['id']}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_music")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_music_"))
async def delete_music_cb(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    music_id = int(callback.data.split("_")[-1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É–∑—ã–∫–µ
        music = await db.get_music_by_id(music_id)
        
        if music:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            if music.get('file_path') and os.path.exists(music['file_path']):
                os.remove(music['file_path'])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            await db.delete_music(music_id)
            
            await callback.answer(f"‚úÖ –ú—É–∑—ã–∫–∞ {music['file_name']} —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await list_music_cb(callback)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.message(MediaManagementStates.waiting_for_font)
@router.message(MediaManagementStates.waiting_for_music)
async def invalid_media_format(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"""
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ])
    )

