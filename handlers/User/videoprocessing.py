from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
from PIL import Image, ImageDraw

from config import ADMIN_ID
from database.user import db
from keyboards.kb_user import main_reply_kb, video_effects_kb
from handlers.User.states import VideoProcessingStates

router = Router()


class VideoProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    @staticmethod
    async def normalize_video(input_path: str, output_path: str) -> bool:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ 16:9 ‚Üí 9:16"""
        try:
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-vf', 'scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2:black',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    @staticmethod
    async def apply_ultra_unique(input_path: str, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å Ultra Unique"""
        try:
            brightness = 1.05  # +5%
            speed = 1.03  # +3%
            
            brightness_value = (brightness - 1.0) * 0.5
            speed_value = speed
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-vf', f'eq=brightness={brightness_value}',
                '-filter_complex', f'[0:v]setpts=PTS/{speed_value}[v];[0:a]atempo={speed_value}[a]',
                '-map', '[v]', '-map', '[a]',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'aac',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Ultra Unique: {e}")
            return False
    
    @staticmethod
    async def apply_trending_frame(input_path: str, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å Trending Frame —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            total_w, total_h = 1080, 1920
            frame_w, frame_h = 1000, 1380
            top_offset = 165
            side_margin = 40
            corner_radius = 50
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
            mask_path = tempfile.mktemp(suffix='.png')
            mask_img = Image.new("RGBA", (frame_w, frame_h), (0, 0, 0, 255))
            draw = ImageDraw.Draw(mask_img)
            draw.rounded_rectangle((0, 0, frame_w, frame_h), radius=corner_radius, fill=(0, 0, 0, 0))
            mask_img.save(mask_path)
            
            # FFmpeg –∫–æ–º–∞–Ω–¥–∞
            fc = (
                f"[0:v]scale={frame_w}:{frame_h}:force_original_aspect_ratio=increase,crop={frame_w}:{frame_h},format=rgba[sv];"
                f"[1:v][sv]scale2ref=w=iw:h=ih[mask][sv2];"
                f"[sv2][mask]overlay=0:0:format=auto[rounded];"
                f"[rounded]pad={total_w}:{total_h}:{side_margin}:{top_offset}:black,format=yuv420p[v]"
            )
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-i', mask_path,
                '-filter_complex', fc,
                '-map', '[v]',
                '-map', '0:a?',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–∞—Å–∫—É
            try:
                os.unlink(mask_path)
            except:
                pass
            
            return result.returncode == 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Trending Frame: {e}")
            return False
    
    @staticmethod
    async def apply_subscribe_bait(input_path: str, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å Subscribe Bait"""
        try:
            # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ (—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ –Ω–µ—Ç)
            subscribe_image_path = Path(__file__).parent.parent.parent / "images" / "1.jpg"
            
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é
            if not subscribe_image_path.exists():
                subscribe_image_path.parent.mkdir(parents=True, exist_ok=True)
                img = Image.new('RGB', (400, 100), color=(255, 0, 0))
                draw = ImageDraw.Draw(img)
                # –ü—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–µ–∫—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —à—Ä–∏—Ñ—Ç)
                img.save(subscribe_image_path)
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-i', str(subscribe_image_path),
                '-filter_complex',
                '[0:v]scale=1080:1920[video];'
                '[1:v]scale=200:50[subscribe_img];'
                '[video][subscribe_img]overlay=(W-w)/2:H-h-250:format=auto[final]',
                '-map', '[final]',
                '-map', '0:a?',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Subscribe Bait: {e}")
            return False
    
    @staticmethod
    async def apply_subtitles(input_path: str, output_path: str, text: str, font_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º"""
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
            text = text.replace("'", "'\\\\\\''").replace(":", "\\:")
            font_path = font_path.replace("\\", "/").replace(":", "\\:")
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-vf', f"drawtext=fontfile='{font_path}':text='{text}':fontsize=60:fontcolor=white:x=(w-text_w)/2:y=h-150:box=1:boxcolor=black@0.5:boxborderw=10",
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Subtitles: {e}")
            return False
    
    @staticmethod
    async def apply_music(input_path: str, output_path: str, music_path: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É"""
        try:
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-i', music_path,
                '-filter_complex', '[0:a][1:a]amix=inputs=2:duration=first:dropout_transition=2',
                '-c:v', 'copy',
                '-c:a', 'aac',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            return result.returncode == 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Music: {e}")
            return False


@router.callback_query(F.data == "videoprcess")
async def videoprcess_cb(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        await callback.message.delete()
        
        user_id = callback.from_user.id
        
        # –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if user_id == ADMIN_ID:
            await callback.message.answer(
                "üé¨ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:",
                reply_markup=video_effects_kb()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not await db.has_subscription(user_id):
            await callback.message.answer(
                "üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="balanceadd")],
                    [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="backstart")]
                ])
            )
            return
        
        if not await db.is_subscription_active(user_id):
            await callback.message.answer(
                "‚åõ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="balanceadd")],
                    [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="backstart")]
                ])
            )
            return
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        end_date = await db.get_subscription_end_date(user_id)
        await callback.message.answer(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:",
            reply_markup=video_effects_kb()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_kb()
        )


@router.callback_query(F.data.startswith("effect_"))
async def select_effect_cb(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞"""
    effect = callback.data.replace("effect_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(effect=effect)
    
    # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —à—Ä–∏—Ñ—Ç
    # if effect == "subtitles":
    #     fonts = await db.get_all_fonts()
    #     
    #     if not fonts:
    #         await callback.message.answer(
    #             "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤</b>\n\n"
    #             "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª —à—Ä–∏—Ñ—Ç—ã.\n"
    #             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —ç—Ñ—Ñ–µ–∫—Ç.",
    #             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    #                 [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="videoprcess")]
    #             ])
    #         )
    #         await callback.answer()
    #         return
    #     
    #     # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
    #     buttons = []
    #     for font in fonts:
    #         buttons.append([
    #             InlineKeyboardButton(
    #                 text=f"üî§ {font['file_name']}",
    #                 callback_data=f"select_font_{font['id']}"
    #             )
    #         ])
    #     buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")])
    #     
    #     await callback.message.edit_text(
    #         "üí¨ <b>–°—É–±—Ç–∏—Ç—Ä—ã</b>\n\n"
    #         f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(fonts)}\n\n"
    #         "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤:",
    #         reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    #     )
    #     await state.set_state(VideoProcessingStates.choosing_font)
    #     await callback.answer()
    #     return
    # 
    # # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º—É–∑—ã–∫–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–∫
    # if effect == "music":
    #     music_list = await db.get_all_music()
    #     
    #     if not music_list:
    #         await callback.message.answer(
    #             "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –º—É–∑—ã–∫–∏</b>\n\n"
    #             "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –º—É–∑—ã–∫—É.\n"
    #             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —ç—Ñ—Ñ–µ–∫—Ç.",
    #             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    #                 [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="videoprcess")]
    #             ])
    #         )
    #         await callback.answer()
    #         return
    #     
    #     # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º—É–∑—ã–∫–∏
    #     buttons = []
    #     for music in music_list:
    #         duration_min = music['duration'] // 60
    #         duration_sec = music['duration'] % 60
    #         buttons.append([
    #             InlineKeyboardButton(
    #                 text=f"üéµ {music['file_name']} ({duration_min}:{duration_sec:02d})",
    #                 callback_data=f"select_music_{music['id']}"
    #             )
    #         ])
    #     buttons.append([
    #         InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è", callback_data="select_music_random")
    #     ])
    #     buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")])
    #     
    #     await callback.message.edit_text(
    #         "üéµ <b>–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É</b>\n\n"
    #         f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(music_list)}\n\n"
    #         "–í—ã–±–µ—Ä–∏—Ç–µ –º—É–∑—ã–∫—É –¥–ª—è –≤–∏–¥–µ–æ:",
    #         reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    #     )
    #     await state.set_state(VideoProcessingStates.choosing_music)
    #     await callback.answer()
    #     return
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤–∏–¥–µ–æ
    await state.set_state(VideoProcessingStates.waiting_for_video)
    
    effect_names = {
        "ultra_unique": "‚ö° Ultra Unique",
        "trending_frame": "üé¨ Trending Frame",
        "subscribe_bait": "üé£ Subscribe Bait",
        "all": "üåü –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
        "normalize": "üìê –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 16:9 ‚Üí 9:16"
    }
    
    await callback.message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: <b>{effect_names.get(effect, effect)}</b>\n\n"
        "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
        "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n"
        "‚è± –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_video")
async def cancel_video_cb(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    await state.clear()
    await callback.message.answer(
        "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_reply_kb()
    )
    await callback.answer()


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –®–†–ò–§–¢–ê ====================
# –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# @router.callback_query(F.data.startswith("select_font_"))
# async def select_font_cb(callback: types.CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞"""
#     font_id = int(callback.data.split("_")[-1])
#     
#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
#     font = await db.get_font_by_id(font_id)
#     
#     if not font:
#         await callback.answer("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
#         return
#     
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
#     await state.update_data(font_id=font_id, font_path=font['file_path'], font_name=font['file_name'])
#     
#     # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
#     await callback.message.edit_text(
#         f"‚úÖ <b>–®—Ä–∏—Ñ—Ç –≤—ã–±—Ä–∞–Ω:</b> {font['file_name']}\n\n"
#         "üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:\n\n"
#         "–ù–∞–ø—Ä–∏–º–µ—Ä: Subscribe to my channel!",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")]
#         ])
#     )
#     await state.set_state(VideoProcessingStates.waiting_for_subtitle_text)
#     await callback.answer()


# @router.message(VideoProcessingStates.waiting_for_subtitle_text)
# async def process_subtitle_text(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
#     subtitle_text = message.text
#     
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
#     await state.update_data(subtitle_text=subtitle_text)
#     
#     # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
#     await message.answer(
#         f"‚úÖ <b>–¢–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:</b> {subtitle_text}\n\n"
#         "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
#         "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n"
#         "‚è± –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")]
#         ])
#     )
#     await state.set_state(VideoProcessingStates.waiting_for_video)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –ú–£–ó–´–ö–ò ====================
# –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# @router.callback_query(F.data.startswith("select_music_"))
# async def select_music_cb(callback: types.CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º—É–∑—ã–∫–∏"""
#     music_id_str = callback.data.split("_")[-1]
#     
#     # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞
#     if music_id_str == "random":
#         music = await db.get_random_music()
#     else:
#         music_id = int(music_id_str)
#         music = await db.get_music_by_id(music_id)
#     
#     if not music:
#         await callback.answer("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
#         return
#     
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É
#     await state.update_data(
#         music_id=music['id'],
#         music_path=music['file_path'],
#         music_name=music['file_name']
#     )
#     
#     # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
#     duration_min = music['duration'] // 60
#     duration_sec = music['duration'] % 60
#     
#     await callback.message.edit_text(
#         f"‚úÖ <b>–ú—É–∑—ã–∫–∞ –≤—ã–±—Ä–∞–Ω–∞:</b> {music['file_name']}\n"
#         f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min}:{duration_sec:02d}\n\n"
#         "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
#         "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n"
#         "‚è± –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")]
#         ])
#     )
#     await state.set_state(VideoProcessingStates.waiting_for_video)
#     await callback.answer()


@router.message(VideoProcessingStates.waiting_for_video, F.video)
async def process_video_handler(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    user_data = await state.get_data()
    effect = user_data.get("effect")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if message.video.file_size > 50 * 1024 * 1024:  # 50 –ú–ë
        await message.answer(
            "‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—å—à–µ–µ –≤–∏–¥–µ–æ."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    temp_dir = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        file = await bot.get_file(message.video.file_id)
        input_path = os.path.join(temp_dir, f"input{Path(file.file_path).suffix}")
        await bot.download_file(file.file_path, input_path)
        
        await processing_msg.edit_text(
            "‚è≥ <b>–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</b>\n\n"
            f"–ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç: {effect}..."
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        current_file = input_path
        processor = VideoProcessor()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        if effect == "normalize":
            output_path = os.path.join(temp_dir, 'result.mp4')
            if not await processor.normalize_video(current_file, output_path):
                raise Exception("–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
            current_file = output_path
            
        elif effect == "ultra_unique":
            output_path = os.path.join(temp_dir, 'result.mp4')
            if not await processor.apply_ultra_unique(current_file, output_path):
                raise Exception("–û—à–∏–±–∫–∞ Ultra Unique")
            current_file = output_path
            
        elif effect == "trending_frame":
            output_path = os.path.join(temp_dir, 'result.mp4')
            if not await processor.apply_trending_frame(current_file, output_path):
                raise Exception("–û—à–∏–±–∫–∞ Trending Frame")
            current_file = output_path
            
        elif effect == "subscribe_bait":
            output_path = os.path.join(temp_dir, 'result.mp4')
            if not await processor.apply_subscribe_bait(current_file, output_path):
                raise Exception("–û—à–∏–±–∫–∞ Subscribe Bait")
            current_file = output_path
        
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # elif effect == "subtitles":
        #     # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        #     subtitle_text = user_data.get("subtitle_text")
        #     font_path = user_data.get("font_path")
        #     
        #     if not subtitle_text or not font_path:
        #         raise Exception("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ —à—Ä–∏—Ñ—Ç")
        #     
        #     output_path = os.path.join(temp_dir, 'result.mp4')
        #     if not await processor.apply_subtitles(current_file, output_path, subtitle_text, font_path):
        #         raise Exception("–û—à–∏–±–∫–∞ Subtitles")
        #     current_file = output_path
        # 
        # elif effect == "music":
        #     # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–∑—ã–∫—É
        #     music_path = user_data.get("music_path")
        #     
        #     if not music_path:
        #         raise Exception("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –º—É–∑—ã–∫–∞")
        #     
        #     output_path = os.path.join(temp_dir, 'result.mp4')
        #     if not await processor.apply_music(current_file, output_path, music_path):
        #         raise Exception("–û—à–∏–±–∫–∞ Music")
        #     current_file = output_path
            
        elif effect == "all":
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            temp_ultra = os.path.join(temp_dir, 'ultra.mp4')
            if not await processor.apply_ultra_unique(current_file, temp_ultra):
                raise Exception("–û—à–∏–±–∫–∞ Ultra Unique")
            
            temp_trending = os.path.join(temp_dir, 'trending.mp4')
            if not await processor.apply_trending_frame(temp_ultra, temp_trending):
                raise Exception("–û—à–∏–±–∫–∞ Trending Frame")
            
            output_path = os.path.join(temp_dir, 'result.mp4')
            if not await processor.apply_subscribe_bait(temp_trending, output_path):
                raise Exception("–û—à–∏–±–∫–∞ Subscribe Bait")
            
            current_file = output_path
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await processing_msg.edit_text(
            "üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...</b>"
        )
        
        video_file = FSInputFile(current_file)
        await message.answer_video(
            video=video_file,
            caption="‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                   f"–≠—Ñ—Ñ–µ–∫—Ç: {effect}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé¨ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ", callback_data="videoprcess")],
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="backstart")]
            ])
        )
        
        await processing_msg.delete()
        await state.clear()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await processing_msg.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="videoprcess")],
                [InlineKeyboardButton(text="üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/makker_o")]
            ])
        )
        await state.clear()
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir and os.path.exists(temp_dir):
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass


@router.message(VideoProcessingStates.waiting_for_video)
async def invalid_video_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_video")]
        ])
    )

