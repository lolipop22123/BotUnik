import aiohttp
import asyncio

from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from datetime import datetime, timedelta

from database.user import db
from keyboards.kb_user import profile_reply_kb, main_reply_kb
from handlers.User.states import PaymentStates
from config import CRYPTO_BOT_TOKEN

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏
active_invoice_tasks = {}


async def create_crypto_invoice(amount: float, user_id: int) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –≤ CryptoBot API
    
    Args:
        amount: –°—É–º–º–∞ –≤ USD
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–æ–π—Å–∞
    payload = {
        "asset": "USDT",  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        "amount": str(amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "paid_btn_name": "callback",  # –ö–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        "paid_btn_url": f"https://t.me/YOUR_BOT_USERNAME",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        "payload": str(user_id)  # –î–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ webhook
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        return data.get("result")
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None


async def check_invoice_status(invoice_id: int) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot API
    
    Args:
        invoice_id: ID –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        –°—Ç–∞—Ç—É—Å—ã: active, paid, expired
    """
    url = "https://pay.crypt.bot/api/getInvoices"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
    params = {
        "invoice_ids": str(invoice_id)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok") and data.get("result", {}).get("items"):
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –∏–Ω–≤–æ–π—Å
                        return data["result"]["items"][0]
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None


async def auto_check_invoice(bot: Bot, user_id: int, invoice_id: int, amount: float, asset: str):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ –≤ —Ñ–æ–Ω–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invoice_id: ID –∏–Ω–≤–æ–π—Å–∞
        amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        asset: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
    """
    timeout = 300  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
    check_interval = 10  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    elapsed_time = 0
    
    try:
        while elapsed_time < timeout:
            await asyncio.sleep(check_interval)
            elapsed_time += check_interval
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
            invoice_data = await check_invoice_status(invoice_id)
            
            if not invoice_data:
                continue
            
            status = invoice_data.get("status")
            
            if status == "paid":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∏–Ω–≤–æ–π—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                if await db.is_invoice_processed(invoice_id):
                    # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                    break
                
                try:
                    # –ü–æ–º–µ—á–∞–µ–º –∏–Ω–≤–æ–π—Å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    await db.mark_invoice_processed(invoice_id, user_id, amount, asset)
                    
                    # –ó–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    new_balance = await db.add_balance(user_id, amount)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot.send_message(
                        user_id,
                        "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                        f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {amount} {asset}\n"
                        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} $\n\n"
                        f"üÜî ID –∏–Ω–≤–æ–π—Å–∞: <code>{invoice_id}</code>\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üéâ",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üöπ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                        ])
                    )
                    print(f"‚úÖ –ò–Ω–≤–æ–π—Å {invoice_id} –æ–ø–ª–∞—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")
                    await bot.send_message(
                        user_id,
                        "‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
                        f"üÜî ID –∏–Ω–≤–æ–π—Å–∞: <code>{invoice_id}</code>",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/makker_o")]
                        ])
                    )
                
                # –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                break
                
            elif status == "expired":
                # –ò–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫
                await bot.send_message(
                    user_id,
                    "‚åõ <b>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                    f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} {asset} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
                    f"üÜî ID –∏–Ω–≤–æ–π—Å–∞: <code>{invoice_id}</code>\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="cryptobotadd")]
                    ])
                )
                print(f"‚åõ –ò–Ω–≤–æ–π—Å {invoice_id} –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 5 –º–∏–Ω—É—Ç –∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–ª—É—á–µ–Ω
        if elapsed_time >= timeout:
            invoice_data = await check_invoice_status(invoice_id)
            if invoice_data and invoice_data.get("status") == "active":
                await bot.send_message(
                    user_id,
                    "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                    f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ (5 –º–∏–Ω—É—Ç).\n"
                    f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} {asset} –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                    f"üÜî ID –∏–Ω–≤–æ–π—Å–∞: <code>{invoice_id}</code>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="cryptobotadd")]
                    ])
                )
                print(f"‚ùå –ò–Ω–≤–æ–π—Å {invoice_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
    except asyncio.CancelledError:
        print(f"üîÑ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if invoice_id in active_invoice_tasks:
            del active_invoice_tasks[invoice_id]


@router.callback_query(F.data == "profile")
async def profile_cb(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    
        user_id = callback.from_user.id
        username = callback.from_user.username
        balance = await db.get_balance(user_id)
        
        await callback.message.answer(
            f"üöπ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üë§ <b>ID:</b> {user_id}\n"
            f"üë§ <b>–ò–º—è:</b> {username}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} $",
            reply_markup=profile_reply_kb()
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pass


@router.callback_query(F.data == "balanceadd")
async def balanceadd_cb(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="CryptoBot", callback_data="cryptobotadd")
            ],
            [
                InlineKeyboardButton(text="Cryptomus", callback_data="tetheradd")
            ],
            [
                InlineKeyboardButton(text=" ‚¨ÖÔ∏è", callback_data="backprofile")
            ]
        ])

        await callback.message.answer(
            f"üöπ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</b>\n\n",
            reply_markup=kb
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pass
    
@router.callback_query(F.data == "cryptobotadd")
async def cryptobotadd_cb(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
        
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoBot"""
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
            ]
        ])
        
        await callback.message.answer(
            "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ CryptoBot</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USD",
            reply_markup=kb
        )
        await state.set_state(PaymentStates.waiting_for_amount)
        await callback.answer()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pass


@router.message(PaymentStates.waiting_for_amount)
async def process_payment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞"""
    try:
        amount = float(message.text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        if amount < 1:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 USD\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        if amount > 10000:
            await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10000 USD\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞
        processing_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        invoice_data = await create_crypto_invoice(amount, message.from_user.id)
        
        if invoice_data:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            pay_url = invoice_data.get("pay_url") or invoice_data.get("bot_invoice_url")
            invoice_id = invoice_data.get("invoice_id")
            asset = invoice_data.get("asset", "USDT")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)
                ]
            ])
            
            await processing_msg.delete()
            await message.answer(
                f"‚úÖ <b>–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {amount} {asset}\n"
                f"üÜî ID –∏–Ω–≤–æ–π—Å–∞: <code>{invoice_id}</code>\n\n"
                f"üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞</b>\n"
                f"‚è± –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 5 –º–∏–Ω—É—Ç\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
                reply_markup=kb
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot = message.bot
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞
            task = asyncio.create_task(
                auto_check_invoice(bot, message.from_user.id, invoice_id, amount, asset)
            )
            active_invoice_tasks[invoice_id] = task
            
            print(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            await state.clear()
        else:
            await processing_msg.delete()
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balanceadd")]
                ])
            )
            await state.clear()
            
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 25.50):"
        )


@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
        
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await state.clear()
        await callback.message.answer(
            "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ö —Å–ø–æ—Å–æ–±–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="balanceadd")]
            ])
        )
        await callback.answer()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pass


@router.callback_query(F.data == "backprofile")
async def backprofile_cb(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
        user_id = callback.from_user.id
        username = callback.from_user.username
        balance = await db.get_balance(user_id)
        
        await callback.message.answer(
            f"üöπ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üë§ <b>ID:</b> {user_id}\n"
            f"üë§ <b>–ò–º—è:</b> {username}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} $",
            reply_markup=profile_reply_kb()
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pass


@router.callback_query(F.data == "backstart")
async def backstart_cb(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
        await callback.message.answer(
            f"<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç</b> üöÄ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            reply_markup=main_reply_kb()
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pass