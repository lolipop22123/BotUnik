#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent))

import subprocess
import tempfile
from datetime import datetime


class VideoProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    
    def __init__(self, video_path: str):
        self.video_path = Path(video_path)
        if not self.video_path.exists():
            raise FileNotFoundError(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
        
        self.output_dir = self.video_path.parent
        self.temp_dir = None
        
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
        print("\n" + "="*60)
        print("üé¨ –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û")
        print("="*60)
        print(f"üìÅ –§–∞–π–ª: {self.video_path.name}")
        print(f"üìÇ –ü–∞–ø–∫–∞: {self.output_dir}")
        print("\n" + "="*60)
        print("–í–´–ë–ï–†–ò–¢–ï –≠–§–§–ï–ö–¢–´:")
        print("="*60)
        
        options = {
            '1': ('Ultra Unique', 'apply_ultra_unique'),
            '2': ('Trending Frame', 'apply_trending_frame'),
            '3': ('Subscribe Bait', 'apply_subscribe_bait'),
            '4': ('–í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã', 'all'),
            '5': ('–¢–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (16:9 ‚Üí 9:16)', 'normalize_only'),
            '0': ('–í—ã—Ö–æ–¥', 'exit')
        }
        
        for key, (name, _) in options.items():
            print(f"  {key}. {name}")
        
        print("="*60)
        
        choice = input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice not in options:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return None
        
        if choice == '0':
            print("üëã –í—ã—Ö–æ–¥...")
            sys.exit(0)
        
        return options[choice][1]
    
    def normalize_video(self, input_path: str, output_path: str) -> bool:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ 16:9 ‚Üí 9:16"""
        print("\nüìê –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ...")
        
        try:
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-vf', 'scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2:black',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def apply_ultra_unique(self, input_path: str, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å Ultra Unique"""
        print("\n‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º Ultra Unique...")
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            brightness = 1.05  # +5%
            speed = 1.03  # +3%
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è FFmpeg
            brightness_value = (brightness - 1.0) * 0.5  # –¥–ª—è eq=brightness
            speed_value = speed
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-vf', f'eq=brightness={brightness_value}',
                '-filter_complex', f'[0:v]setpts=PTS/{speed_value}[v];[0:a]atempo={speed_value}[a]',
                '-map', '[v]', '-map', '[a]',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'aac',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ Ultra Unique –ø—Ä–∏–º–µ–Ω–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Ultra Unique: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def apply_trending_frame(self, input_path: str, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å Trending Frame —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º"""
        print("\nüé¨ –ü—Ä–∏–º–µ–Ω—è–µ–º Trending Frame...")
        
        try:
            from PIL import Image, ImageDraw
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            total_w, total_h = 1080, 1920
            frame_w, frame_h = 1000, 1380
            top_offset = 165
            side_margin = 40
            corner_radius = 50
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
            mask_path = tempfile.mktemp(suffix='.png')
            mask_img = Image.new("RGBA", (frame_w, frame_h), (0, 0, 0, 255))
            draw = ImageDraw.Draw(mask_img)
            draw.rounded_rectangle((0, 0, frame_w, frame_h), radius=corner_radius, fill=(0, 0, 0, 0))
            mask_img.save(mask_path)
            
            # FFmpeg –∫–æ–º–∞–Ω–¥–∞
            fc = (
                f"[0:v]scale={frame_w}:{frame_h}:force_original_aspect_ratio=increase,crop={frame_w}:{frame_h},format=rgba[sv];"
                f"[1:v][sv]scale2ref=w=iw:h=ih[mask][sv2];"
                f"[sv2][mask]overlay=0:0:format=auto[rounded];"
                f"[rounded]pad={total_w}:{total_h}:{side_margin}:{top_offset}:black,format=yuv420p[v]"
            )
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-i', mask_path,
                '-filter_complex', fc,
                '-map', '[v]',
                '-map', '0:a?',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–∞—Å–∫—É
            try:
                os.unlink(mask_path)
            except:
                pass
            
            if result.returncode == 0:
                print("‚úÖ Trending Frame –ø—Ä–∏–º–µ–Ω–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Trending Frame: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def apply_subscribe_bait(self, input_path: str, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å Subscribe Bait"""
        print("\nüé£ –ü—Ä–∏–º–µ–Ω—è–µ–º Subscribe Bait...")
        
        try:
            # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            subscribe_image = Path(__file__).parent.parent / "images" / "1.jpg"
            
            if not subscribe_image.exists():
                print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {subscribe_image}")
                return False
            
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-i', str(subscribe_image),
                '-filter_complex',
                '[0:v]scale=1080:1920[video];'
                '[1:v]scale=200:50[subscribe_img];'
                '[video][subscribe_img]overlay=(W-w)/2:H-h-250:format=auto[final]',
                '-map', '[final]',
                '-c:v', 'libx264', '-crf', '23', '-preset', 'medium', '-pix_fmt', 'yuv420p',
                '-c:a', 'copy',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ Subscribe Bait –ø—Ä–∏–º–µ–Ω–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Subscribe Bait: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def process(self, mode: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ"""
        print("\n" + "="*60)
        print("üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_name = f"{self.video_path.stem}_processed_{timestamp}{self.video_path.suffix}"
        output_path = self.output_dir / output_name
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.temp_dir = tempfile.mkdtemp()
        
        try:
            current_file = str(self.video_path)
            
            # –¢–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if mode == 'normalize_only':
                if not self.normalize_video(current_file, str(output_path)):
                    raise Exception("–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
                print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ: {output_path}")
                return
            
            # Ultra Unique
            if mode in ['apply_ultra_unique', 'all']:
                temp_ultra = os.path.join(self.temp_dir, 'ultra_unique.mp4')
                if not self.apply_ultra_unique(current_file, temp_ultra):
                    raise Exception("–û—à–∏–±–∫–∞ Ultra Unique")
                current_file = temp_ultra
            
            # Trending Frame
            if mode in ['apply_trending_frame', 'all']:
                temp_trending = os.path.join(self.temp_dir, 'trending_frame.mp4')
                if not self.apply_trending_frame(current_file, temp_trending):
                    raise Exception("–û—à–∏–±–∫–∞ Trending Frame")
                current_file = temp_trending
            
            # Subscribe Bait
            if mode in ['apply_subscribe_bait', 'all']:
                temp_subscribe = os.path.join(self.temp_dir, 'subscribe_bait.mp4')
                if not self.apply_subscribe_bait(current_file, temp_subscribe):
                    raise Exception("–û—à–∏–±–∫–∞ Subscribe Bait")
                current_file = temp_subscribe
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import shutil
            shutil.copy2(current_file, str(output_path))
            
            print("\n" + "="*60)
            print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("="*60)
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {output_path.stat().st_size / 1024 / 1024:.2f} MB")
            print("="*60)
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            import shutil
            if self.temp_dir and os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*60)
    print("üé¨ –ö–û–ù–°–û–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ò–î–ï–û")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
    if len(sys.argv) > 1:
        video_path = sys.argv[1]
    else:
        video_path = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ: ").strip()
    
    try:
        processor = VideoProcessor(video_path)
        mode = processor.show_menu()
        
        if mode:
            processor.process(mode)
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()

